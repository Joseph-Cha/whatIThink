리액트란 무엇일까?
내가 리액트를 선택한 이유는 단순했다.
어렵지만 어렵기 때문에 배워두면 그것 또한 전문성이 될거라는 점.
질문을 받았다.

리액트가 뭐야? 왜 리액트를 사용해야하지?

대답 할 수 없었다. 무작정 찾아보고 코딩을 따라하고(?)있는 나에게 참 어려운 질문이었다.
그래서 차근차근 알아보려한다.
리액트가 무엇인지, 왜 리액트를 사용하는지.

React.
초보자에게 '리액트'하면 떠오르는 단어는 많지 않다.
'컴포넌트', '페이스북', '빠르다?', 'Virtual DOM'...

리액트란 UI(User Interfaces)를 위한 Javascript 라이브러리라고 홈페이지에 설명되어있다.
'A JAVASCRIPT LIBRARY FOR BUILDING USER INTERFACES'

리액트는 무엇이 기본이 되는 걸까 생각해보면 [컴포넌트]다.
내가 생각하는 추상적인 개념을 말로 풀어보자면 크고 작은 포스트잇 같았다.
잘 정리되어 쓰여진 포스트잇을 필요한 공간으로 이동, 부착이 가능하고
수정이 필요한 내용은 포스트잇 내부에서 고칠 수 있는 것과 비슷하게 느껴졌다.

개념적으로 컴포넌트는 함수이다.
더 자세히 찾아보면 'props를 이용해 React Element를 결과로 도출'하고 그 'React Element는 UI가 어떻게 보여지는지 정의'한다.
UI의 재사용을 가능하게하고 또한 독립적인 단위로 쪼개어 생각할 수 있게 한다. 이 부분을 나는 포스트잇 같다고 느꼈다.
여기서 등장하는 또 하나의 개념이 Lifecycle함수이다.
화면에 컴포넌트를 보여주고(Mounting), 갱신하고(Updating), 지워야하는(Unmouting) 과정은 UI를 구성하게 되고
컴포넌트는 각 과정이 진행될 때 Lifecycle함수를 실행한다.
개발자가 이 것을 재정의하여 컴포넌트를 제어하니 Lifecycle함수를 완벽히 이해해야한다.
https://twitter.com/sstur_/status/970706983060848640

컴포넌트의 두가지 인스턴스 속성은 props와 state이다.
props는 변경이 불가능하고, state는 변경이 가능하다 정도만 알고있었는데
굳이 왜 변경이 가능한 것과 불가능 한 것으로 나눴을까?
애매함을 버리고 개발자들에게 명확함을 심어주기 위함이다.
props가 변경 가능하다면 props를 보내는 부모컴포넌트에 영향을 줘야할지,
state가 없다면 변경해야만 하는 값은 어떻게 관리할지 생각해보면 알 수있다.
여기서 알게된 점은 컴포넌트 간에는 무조건 props로만 데이터를 주고 받고, 내부에서 변경 불가능하다.
따라서 부모,자식컴포넌트에 끼칠 영향에 대해 고민할 필요가 없다. (부모->자식 방향만 고민하면 된다)

